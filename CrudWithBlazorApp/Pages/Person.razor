@page "/person"
@inject HttpClient http

<h3>Person</h3>
<h1>@data</h1>

@if (People == null)
{
   <h6>Loading...</h6>
}
else if (People.Length == 0)
{
    <h6>no data to display</h6>
}
else
{
   <table class="table table-bordered table-striped">
       <thead>
           <tr>
               <th>Name</th>
               <th>Last Name</th>
               <th>Age</th>
               <th>Date of Birth</th>
               <th>Phone Number</th>
               <th>Email</th>
               <th>Ocupation</th>
               <th>Address</th>
           </tr>
       </thead>
        
       <tbody>
           @foreach (var item in People)
           {
           <tr>
               <td>@item.Name</td>
               <td>@item.LastName</td>
               <td>@item.Age</td>
               <td>@item.DateofBirth.Date.ToShortDateString()</td>
               <td>@item.PhoneNumber</td>
               <td>@item.Email</td>
               <td>@item.Ocupation</td>
               <td>@item.Address</td>
               <td>
                   <button class="btn btn-primary">
                       <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                       Edit
                   </button>
                   <button class="btn btn-danger">
                       <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                       Remove
                   </button>
               </td>
           </tr>
           }
       </tbody>
   </table> 
}



@code {
    private Models.Person[] People { get; set; }
    string data;

    protected override async Task OnInitializedAsync()
    {
       await LoadPeople();
    }


    async Task LoadPeople()
    {
        data = await http.GetStringAsync("api/People/GetPeople");
    }
}
